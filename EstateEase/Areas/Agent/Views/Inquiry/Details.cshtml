@model InquiryViewModel
@{
    ViewData["Title"] = "Inquiry Details";
    Layout = "_AgentLayout";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="mb-1 fw-bold">Inquiry Details</h4>
                    <p class="text-muted">Review client inquiry information</p>
                </div>
                <div>
                    <a asp-action="Index" class="btn btn-outline-primary rounded-pill">
                        <i class="bi bi-arrow-left me-2"></i> Back to Messages
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm rounded-4 fade-in show">
                <div class="card-header gradient-primary text-white p-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 fw-bold">Message #@Model.Id</h5>
                        <span class="@(Model.Status == "New" ? "badge bg-danger" : Model.Status == "In Progress" ? "badge bg-warning" : "badge bg-success") rounded-pill px-3 py-2">@Model.Status</span>
                    </div>
                </div>
                <div class="card-body p-4">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-4">
                                <h6 class="text-muted mb-2">Client Information</h6>
                                <div class="d-flex align-items-center mb-3">
                                    <div class="avatar-circle me-3">
                                        @if (!string.IsNullOrEmpty(Model.ClientName))
                                        {
                                            <span>@(Model.ClientName[0].ToString().ToUpper())</span>
                                        }
                                        else
                                        {
                                            <span>U</span>
                                        }
                                    </div>
                                    <div>
                                        <h5 class="mb-1 fw-semibold">@Model.ClientName</h5>
                                        <p class="text-muted mb-0">@Model.ClientEmail</p>
                                        @if (!string.IsNullOrEmpty(Model.ClientPhone))
                                        {
                                            <p class="text-muted mb-0">@Model.ClientPhone</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-4">
                                <h6 class="text-muted mb-2">Inquiry Details</h6>
                                <p><strong>Subject:</strong> @Model.Subject</p>
                                <p><strong>Received:</strong> @Model.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</p>
                                @if (!string.IsNullOrEmpty(Model.PropertyId))
                                {
                                    <div class="d-flex align-items-center mt-3">
                                        <div class="property-image rounded me-2" style="background-image: url('/images/property-placeholder.jpg')"></div>
                                        <div>
                                            <h6 class="mb-1 fw-semibold">@Model.PropertyTitle</h6>
                                            <p class="text-muted small mb-0">@Model.PropertyAddress</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-12">
                            <h6 class="text-muted mb-3">Conversation</h6>
                            <div class="chat-container rounded-4 p-3 bg-light">
                                <div class="chat-messages" id="chatMessages">
                                    @if (Model.Messages != null && Model.Messages.Any())
                                    {
                                        @foreach (var message in Model.Messages.OrderBy(m => m.CreatedAt))
                                        {
                                            string messageClass = message.IsFromCurrentUser ? "chat-message-outgoing" : "chat-message-incoming";
                                            string senderType = message.SenderType;
                                            string senderBadgeClass = senderType == "User" ? "bg-primary" : (senderType == "Agent" ? "bg-info" : "bg-secondary");
                                            
                                            <div class="chat-message @messageClass">
                                                <div class="message-content">
                                                    <div class="message-header">
                                                        <span class="badge @senderBadgeClass rounded-pill">@(message.SenderName)</span>
                                                        <small class="text-muted ms-2">@message.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</small>
                                                    </div>
                                                    <div class="message-body">
                                                        @message.Message
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="chat-message chat-message-incoming">
                                            <div class="message-content">
                                                <div class="message-header">
                                                    <span class="badge bg-primary rounded-pill">Client</span>
                                                    <small class="text-muted ms-2">@Model.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</small>
                                                </div>
                                                <div class="message-body">
                                                    @Model.Message
                                                </div>
                                            </div>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(Model.ReplyMessage))
                                        {
                                            <div class="chat-message chat-message-outgoing">
                                                <div class="message-content">
                                                    <div class="message-header">
                                                        <span class="badge bg-info rounded-pill">You</span>
                                                        <small class="text-muted ms-2">@(Model.UpdatedAt?.ToString("MMM dd, yyyy hh:mm tt") ?? Model.CreatedAt.AddDays(1).ToString("MMM dd, yyyy hh:mm tt"))</small>
                                                    </div>
                                                    <div class="message-body">
                                                        @Model.ReplyMessage
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                                
                                @if (Model.Status != "Resolved")
                                {
                                    <div class="quick-reply-form mt-4">
                                        <form asp-action="QuickReply" asp-route-id="@Model.Id" method="post">
                                            <div class="input-group">
                                                <input type="text" name="replyMessage" class="form-control" placeholder="Type your message..." required>
                                                <button type="submit" class="btn btn-primary">
                                                    <i class="bi bi-send"></i>
                                                </button>
                                            </div>
                                        </form>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="mt-4 d-flex gap-2 justify-content-end">
                        @if (Model.Status != "Resolved")
                        {
                            <form asp-action="MarkAsResolved" asp-route-id="@Model.Id" method="post" class="d-inline">
                                <button type="submit" class="btn btn-success">
                                    <i class="bi bi-check-lg me-2"></i> Mark as Resolved
                                </button>
                            </form>
                        }
                        else
                        {
                            <span class="badge bg-success p-2">
                                <i class="bi bi-check-circle me-2"></i> This inquiry has been resolved
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Gradient colors */
        .gradient-primary {
            background: linear-gradient(135deg, #2937f0 0%, #9f1ae2 100%);
        }
        
        /* Card styling */
        .card {
            overflow: hidden;
            border-radius: 16px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
        }
        
        .card-header {
            border-bottom: 0;
        }
        
        /* Avatar styling */
        .avatar-circle {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #2937f0 0%, #9f1ae2 100%);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.5rem;
        }
        
        /* Property image */
        .property-image {
            width: 50px;
            height: 50px;
            background-size: cover;
            background-position: center;
        }
        
        /* Animation */
        .fade-in {
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.5s ease, transform 0.5s ease;
        }
        
        .fade-in.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        /* Badge styling */
        .badge {
            padding: 0.5em 1em;
            font-weight: normal;
        }
        
        /* Reply highlight */
        .bg-success-light {
            background-color: rgba(12, 188, 135, 0.1);
            border-left: 4px solid #0cbc87;
        }
        
        /* Chat styling */
        .chat-container {
            display: flex;
            flex-direction: column;
            max-height: 400px;
            overflow-y: auto;
        }
        
        .chat-messages {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .chat-message {
            display: flex;
            margin-bottom: 1rem;
        }
        
        .chat-message-incoming {
            justify-content: flex-start;
        }
        
        .chat-message-outgoing {
            justify-content: flex-end;
        }
        
        .message-content {
            max-width: 80%;
            padding: 0.75rem;
            border-radius: 1rem;
        }
        
        .chat-message-incoming .message-content {
            background-color: white;
            border-top-left-radius: 0;
        }
        
        .chat-message-outgoing .message-content {
            background-color: #e9f3ff;
            border-top-right-radius: 0;
        }
        
        .message-header {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .message-body {
            white-space: pre-wrap;
        }
        
        /* Quick reply form */
        .quick-reply-form .input-group {
            border-radius: 50px;
            overflow: hidden;
        }
        
        .quick-reply-form .form-control {
            border-right: 0;
            padding: 10px 20px;
        }
        
        .quick-reply-form .btn {
            border-radius: 0 50px 50px 0;
            padding-left: 20px;
            padding-right: 20px;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Scroll to bottom of chat messages
            var chatContainer = document.getElementById('chatMessages');
            if (chatContainer) {
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
        });
    </script>
} 