@using EstateEase.Models.ViewModels
@inject IConfiguration Configuration
@model PropertyViewModel
@{
    ViewData["Title"] = "Edit Property";
    Layout = "_AdminLayout";
    var tinyMCEApiKey = Configuration.GetValue<string>("TinyMCE:ApiKey");
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="card border-0 shadow-lg">
                <div class="card-header position-relative overflow-hidden py-4"
                     style="background: linear-gradient(45deg, #4f5aff, #9f1ae2);">
                    <h5 class="card-title mb-0 fw-bold ps-2 text-white">
                        Edit Property
                    </h5>
                    <div class="position-absolute top-50 end-0 translate-middle-y me-4 opacity-25">
                        <i class="bi bi-building display-1 text-white"></i>
                    </div>
                </div>

                <div class="card-body p-4">
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show border-0 rounded-3 shadow-sm"
                             role="alert">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-exclamation-circle-fill fs-4 me-2"></i>
                                <div>@TempData["Error"]</div>
                            </div>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show border-0 rounded-3 shadow-sm"
                             role="alert">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-check-circle-fill fs-4 me-2"></i>
                                <div>@TempData["Success"]</div>
                            </div>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    
                    <form method="post" enctype="multipart/form-data" asp-action="Edit" asp-controller="Property"
                          asp-area="Admin" class="needs-validation">
                        <input type="hidden" asp-for="Id" />
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger rounded-3 shadow-sm mb-4">
                        </div>

                        <!-- Basic Information -->
                        <div class="section mb-5">
                            <h5 class="text-primary fw-bold mb-4">
                                <i class="bi bi-info-circle me-2"></i>Basic Information
                            </h5>
                            <div class="row g-4">
                                <div class="col-12">
                                    <div class="form-floating">
                                        <input asp-for="Title" class="form-control" placeholder="Enter Title">
                                        <label asp-for="Title">Property Title</label>
                                        <span asp-validation-for="Title" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating">
                                        <textarea asp-for="Content" class="form-control" placeholder="Enter Description" style="height: 200px"></textarea>
                                        <label asp-for="Content">Description</label>
                                        <span asp-validation-for="Content" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Property Details -->
                        <div class="section mb-5">
                            <h5 class="text-primary fw-bold mb-4">
                                <i class="bi bi-house-gear me-2"></i>Property Details
                            </h5>
                            <div class="row g-4">
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <select asp-for="PropertyType" class="form-select">
                                            <option value="" disabled selected>Select Type</option>
                                            <option value="Single-Family Detached House">Single-Family Detached House</option>
                                            <option value="Townhouse">Townhouse</option>
                                            <option value="Duplex">Duplex</option>
                                            <option value="Bungalow">Bungalow</option>
                                            <option value="Villa">Villa</option>
                                        </select>
                                        <label asp-for="PropertyType">Property Type</label>
                                        <span asp-validation-for="PropertyType" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <select asp-for="SellingType" class="form-select">
                                            <option value="" disabled selected>Select Type</option>
                                            <option value="Rent">Rent</option>
                                            <option value="Sale">Sale</option>
                                        </select>
                                        <label asp-for="SellingType">Selling Type</label>
                                        <span asp-validation-for="SellingType" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <input asp-for="Bedrooms" class="form-control" type="number" placeholder="Bedrooms">
                                        <label asp-for="Bedrooms">Bedrooms</label>
                                        <span asp-validation-for="Bedrooms" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <input asp-for="Bathrooms" class="form-control" type="number" placeholder="Bathrooms">
                                        <label asp-for="Bathrooms">Bathrooms</label>
                                        <span asp-validation-for="Bathrooms" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <input asp-for="Kitchen" class="form-control" type="number" placeholder="Kitchen">
                                        <label asp-for="Kitchen">Kitchen</label>
                                        <span asp-validation-for="Kitchen" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-floating">
                                        <input asp-for="Balcony" class="form-control" type="number" placeholder="Balcony">
                                        <label asp-for="Balcony">Balcony</label>
                                        <span asp-validation-for="Balcony" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-floating">
                                        <input asp-for="Hall" class="form-control" type="number" placeholder="Hall">
                                        <label asp-for="Hall">Hall</label>
                                        <span asp-validation-for="Hall" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-floating">
                                        <input asp-for="TotalFloors" class="form-control" type="number" placeholder="Total Floors">
                                        <label asp-for="TotalFloors">Total Floors</label>
                                        <span asp-validation-for="TotalFloors" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-floating">
                                        <input asp-for="Size" class="form-control" type="number" step="0.01" placeholder="Area">
                                        <label asp-for="Size">Area (sq m)</label>
                                        <span asp-validation-for="Size" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating">
                                        <textarea asp-for="Address" class="form-control" placeholder="Address" style="height: 100px"></textarea>
                                        <label asp-for="Address">Address</label>
                                        <span asp-validation-for="Address" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input asp-for="Price" class="form-control" type="number" placeholder="Price" min="0" step="any">
                                        <label asp-for="Price">Price (₱)</label>
                                        <span asp-validation-for="Price" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <select asp-for="Status" class="form-select">
                                            <option value="Available">Available</option>
                                            <option value="Sold">Sold</option>
                                            <option value="Rented">Rented</option>
                                        </select>
                                        <label asp-for="Status">Status</label>
                                        <span asp-validation-for="Status" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Property Features -->
                        <div class="section mb-5">
                            <h5 class="text-primary fw-bold mb-4">
                                <i class="bi bi-list-check me-2"></i>Property Features
                            </h5>
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <div class="form-check form-switch">
                                        <input asp-for="HasSwimmingPool" class="form-check-input" type="checkbox" role="switch">
                                        <label asp-for="HasSwimmingPool" class="form-check-label">Swimming Pool</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch">
                                        <input asp-for="HasParking" class="form-check-input" type="checkbox" role="switch">
                                        <label asp-for="HasParking" class="form-check-label">Parking</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch">
                                        <input asp-for="HasGym" class="form-check-input" type="checkbox" role="switch">
                                        <label asp-for="HasGym" class="form-check-label">Gym</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch">
                                        <input asp-for="HasSecurity" class="form-check-input" type="checkbox" role="switch">
                                        <label asp-for="HasSecurity" class="form-check-label">Security</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch">
                                        <input asp-for="HasElevator" class="form-check-input" type="checkbox" role="switch">
                                        <label asp-for="HasElevator" class="form-check-label">Elevator</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch">
                                        <input asp-for="HasCCTV" class="form-check-input" type="checkbox" role="switch">
                                        <label asp-for="HasCCTV" class="form-check-label">CCTV</label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Images & Plans -->
                        <div class="section mb-5">
                            <h5 class="text-primary fw-bold mb-4">
                                <i class="bi bi-images me-2"></i>Property Images
                            </h5>
                            <div class="row g-4">
                                <!-- Add Property Images Button -->
                                <div class="col-12 mb-4">
                                    <div class="d-flex justify-content-end">
                                        <div class="file-upload-wrapper">
                                            <input type="file" name="PropertyImages" id="propertyImagesInput" multiple accept="image/*" class="d-none" />
                                            <button type="button" id="addPropertyImagesBtn" class="btn btn-gradient btn-rounded px-4 py-2">
                                                <i class="bi bi-plus-circle me-2"></i>Add Property Images
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Existing Images -->
                                @if (Model.ExistingImages != null && Model.ExistingImages.Any(i => 
                                    i.ImageType == "Property"))
                                {
                                    <div class="col-12 mb-4">
                                        <h6 class="text-muted mb-3">Current Property Images</h6>
                                        
                                        <div class="row g-3">
                                            @foreach (var image in Model.ExistingImages.Where(i => 
                                                i.ImageType == "Property").OrderBy(i => i.CreatedAt))
                                            {
                                                <div class="col-md-4 mb-4" id="image-container-@image.Id">
                                                    <div class="card h-100 border-0 shadow-sm hover-elevate-up">
                                                        <div class="card-body p-0">
                                                            <img src="@Url.Content(image.ImagePath)" class="card-img"
                                                                 alt="@image.ImageType"
                                                                 onerror="this.src='/uploads/properties/placeholder.jpg'; this.onerror=null;">
                                                            
                                                            <div class="position-absolute bottom-0 start-0 p-3">
                                                                <span class="badge rounded-pill bg-primary">
                                                                    <i class="bi bi-image me-1"></i>
                                                                    Property Image
                                                                </span>
                                                            </div>
                                                            
                                                            <div class="position-absolute top-0 end-0 p-3 d-flex gap-2">
                                                                <button type="button" class="btn btn-sm btn-edit rounded-circle edit-img-btn" 
                                                                        data-id="@image.Id" 
                                                                        data-type="@image.ImageType"
                                                                        title="Edit image">
                                                                    <i class="bi bi-pencil-fill"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-sm btn-delete rounded-circle delete-img-btn" 
                                                                        data-id="@image.Id" 
                                                                        data-type="@image.ImageType"
                                                                        title="Delete image">
                                                                    <i class="bi bi-trash-fill"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-12">
                                        <div class="alert alert-info">
                                            No property images available.
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Floor Plans -->
                        <div class="section mb-5">
                            <h5 class="text-primary fw-bold mb-4">
                                <i class="bi bi-layers me-2"></i>Floor Plans
                            </h5>
                            <div class="row g-4">
                                <!-- Add Floor Plan Button -->
                                <div class="col-12 mb-4">
                                    <div class="d-flex justify-content-end">
                                        <div class="file-upload-wrapper">
                                            <input type="file" name="FloorPlanImages" id="floorPlanImagesInput" multiple accept="image/*" class="d-none" />
                                            <button type="button" id="addFloorPlanImagesBtn" class="btn btn-gradient btn-rounded px-4 py-2">
                                                <i class="bi bi-plus-circle me-2"></i>Add Floor Plan Images
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Existing Floor Plans -->
                                @if (Model.ExistingImages != null && Model.ExistingImages.Any(i => i.ImageType == "FloorPlan"))
                                {
                                    <div class="col-12 mb-4">
                                        <h6 class="text-muted mb-3">Current Floor Plans</h6>
                                        
                                        <div class="row g-3">
                                    <!-- Main Floor Plan -->
                                    @foreach (var image in Model.ExistingImages.Where(i => i.ImageType == "FloorPlan").OrderBy(i => i.CreatedAt))
                                    {
                                                <div class="col-md-4 mb-4" id="image-container-@image.Id">
                                            <div class="card h-100 border-0 shadow-sm hover-elevate-up">
                                                <div class="card-body p-0">
                                                    <img src="@Url.Content(image.ImagePath)" class="card-img"
                                                         alt="Floor Plan"
                                                                 onerror="this.src='/uploads/properties/placeholder.jpg'; this.onerror=null;">
                                                    
                                                    <div class="position-absolute bottom-0 start-0 p-3">
                                                        <span class="badge rounded-pill bg-primary">
                                                            <i class="bi bi-layers me-1"></i>Floor Plan
                                                        </span>
                                                    </div>
                                                    
                                                    <div class="position-absolute top-0 end-0 p-3 d-flex gap-2">
                                                        <button type="button" class="btn btn-sm btn-edit rounded-circle edit-img-btn" 
                                                                data-id="@image.Id" 
                                                                data-type="@image.ImageType"
                                                                title="Edit image">
                                                            <i class="bi bi-pencil-fill"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-delete rounded-circle delete-img-btn" 
                                                                data-id="@image.Id" 
                                                                data-type="@image.ImageType"
                                                                title="Delete image">
                                                            <i class="bi bi-trash-fill"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-12">
                                        <div class="alert alert-info">
                                            No floor plans available.
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Featured Status -->
                        <div class="section mb-5">
                            <h5 class="text-primary fw-bold mb-4">
                                <i class="bi bi-star me-2"></i>Featured Status
                            </h5>
                            <div class="form-floating">
                                <select asp-for="IsFeatured" class="form-select">
                                    <option value="true">Yes</option>
                                    <option value="false">No</option>
                                </select>
                                <label asp-for="IsFeatured">Featured Property</label>
                            </div>
                        </div>

                        <!-- Hidden field to track deleted image IDs -->
                        <input type="hidden" name="DeletedImageIds" id="deletedImageIds" value="" />
                        
                        <!-- Hidden container for replacement image inputs -->
                        <div id="replacementImagesContainer" style="display: none;"></div>

                        <!-- Form Actions -->
                        <div class="d-flex justify-content-end gap-2">
                            <a asp-action="ViewPropertyList" class="btn btn-light btn-lg px-5">
                                <i class="bi bi-x-lg me-2"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary btn-lg px-5">
                                <i class="bi bi-check-lg me-2"></i>Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        :root {
            --primary-gradient: linear-gradient(45deg, #4f5aff, #9f1ae2);
            --delete-gradient: linear-gradient(45deg, #ff4f4f, #e21a1a);
        }

        .section {
            background: #fff;
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .form-floating > .form-control,
        .form-floating > .form-select {
            height: calc(3.5rem + 2px);
            line-height: 1.25;
        }

        .form-floating > label {
            padding: 1rem 0.75rem;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: #9f1ae2;
            box-shadow: 0 0 0 0.25rem rgba(159, 26, 226, 0.25);
        }

        .btn-primary {
            background: var(--primary-gradient);
            border: none;
        }

        .btn-primary:hover {
            background: linear-gradient(45deg, #232cc5, #8516bd);
        }
        
        /* Gradient buttons */
        .btn-gradient {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            font-weight: 500;
            letter-spacing: 0.5px;
            box-shadow: 0 4px 15px rgba(79, 90, 255, 0.4);
            transition: all 0.3s ease;
        }
        
        .btn-gradient:hover, .btn-gradient:focus {
            background: linear-gradient(45deg, #232cc5, #8516bd);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(79, 90, 255, 0.6);
        }
        
        .btn-rounded {
            border-radius: 50px;
        }
        
        /* Edit and Delete buttons */
        .btn-edit {
            background: var(--primary-gradient);
            color: white;
            border: none;
            box-shadow: 0 4px 10px rgba(79, 90, 255, 0.4);
        }
        
        .btn-edit:hover {
            background: linear-gradient(45deg, #232cc5, #8516bd);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(79, 90, 255, 0.6);
        }
        
        .btn-delete {
            background: var(--delete-gradient);
            color: white;
            border: none;
            box-shadow: 0 4px 10px rgba(226, 26, 26, 0.4);
        }
        
        .btn-delete:hover {
            background: linear-gradient(45deg, #e01b1b, #a51515);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(226, 26, 26, 0.6);
        }
        
        /* Upload button styles */
        .file-upload-wrapper {
            position: relative;
            margin-bottom: 1.5rem;
        }
        
        #addPropertyImagesBtn, #addFloorPlanImagesBtn {
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        #addPropertyImagesBtn:hover, #addFloorPlanImagesBtn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(79, 90, 255, 0.5);
        }
        
        #addPropertyImagesBtn i, #addFloorPlanImagesBtn i {
            font-size: 1.1rem;
            margin-right: 8px;
        }

        .form-check-input:checked {
            background-color: #9f1ae2;
            border-color: #9f1ae2;
        }

        .text-primary {
            color: #2937f0 !important;
        }

        .form-text {
            color: #6c757d;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .alert {
            border-left: 4px solid;
        }

        .alert-danger {
            border-left-color: #dc3545;
        }

        .alert-success {
            border-left-color: #198754;
        }

        .form-check.form-switch {
            padding-left: 3rem;
        }

        .form-switch .form-check-input {
            width: 2.5em;
            margin-left: -3rem;
        }

        .section h5 {
            position: relative;
            padding-left: 1rem;
        }

        .section h5::before {
            content: '';
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 3px;
            height: 1rem;
            background: var(--primary-gradient);
            border-radius: 3px;
        }

        /* Animation styles */
        .card {
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease-out;
        }

        .card.show {
            opacity: 1;
            transform: translateY(0);
        }

        .section {
            opacity: 0;
            transform: translateY(30px);
            transition: all 0.5s ease-out;
        }

        .section.show {
            opacity: 1;
            transform: translateY(0);
        }

        .section:nth-child(1) { transition-delay: 0.2s; }
        .section:nth-child(2) { transition-delay: 0.3s; }
        .section:nth-child(3) { transition-delay: 0.4s; }
        .section:nth-child(4) { transition-delay: 0.5s; }
        .section:nth-child(5) { transition-delay: 0.6s; }
        
        /* Updated Image display styles to match ViewProperty page */
        .card-body.p-0 {
            height: 250px;
            overflow: hidden;
        }
        
        .card-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 12px;
        }
        
        .hover-elevate-up {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .hover-elevate-up:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
        }

        /* Card specific styles */
        .card.h-100 {
            border-radius: 12px;
            overflow: hidden;
        }
        
        /* Make sure buttons and badges are visible */
        .position-absolute.top-0.end-0 {
            z-index: 10;
        }
        
        .position-absolute.bottom-0.start-0 {
            z-index: 10;
        }
        
        /* Button styling */
        .btn-sm.rounded-circle {
            width: 38px;
            height: 38px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            margin-left: 5px;
            opacity: 0.95;
            transition: all 0.2s ease;
        }
        
        /* Modal styles */
        .delete-confirmation-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1050;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .delete-confirmation-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .delete-confirmation-modal {
            background: white;
            border-radius: 1rem;
            padding: 2rem;
            max-width: 400px;
            width: 90%;
            text-align: center;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.3);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .delete-confirmation-overlay.show .delete-confirmation-modal {
            transform: scale(1);
        }
        
        /* Pending action styles */
        .pending-delete-overlay {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 20;
        }
        
        .pending-replacement-overlay {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 20;
        }
        
        .pending-badge {
            font-size: 0.8rem;
            padding: 0.35rem 0.7rem;
            border-radius: 50px;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
        }
        
        .badge-pending-delete {
            background-color: #dc3545;
            color: white;
            animation: pulse-delete 1.5s infinite;
        }
        
        .badge-pending-replace {
            background-color: #0d6efd;
            color: white;
            animation: pulse-replace 1.5s infinite;
        }
        
        .pending-replacement-preview {
            position: absolute;
            bottom: 40px;
            right: 10px;
            max-width: 80px;
            max-height: 80px;
            border-radius: 4px;
            border: 2px solid #0d6efd;
            background-color: white;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
            z-index: 15;
        }
        
        @@keyframes pulse-delete {
            0% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(220, 53, 69, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
            }
        }
        
        @@keyframes pulse-replace {
            0% {
                box-shadow: 0 0 0 0 rgba(13, 110, 253, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(13, 110, 253, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(13, 110, 253, 0);
            }
        }
        
        .cancel-action {
            cursor: pointer;
            font-size: 0.8rem;
            margin-left: 5px;
            opacity: 0.7;
            transition: all 0.2s ease;
        }
        
        .cancel-action:hover {
            opacity: 1;
        }
        
        .image-pending-delete .card-img {
            opacity: 0.6;
            filter: grayscale(70%);
            transition: all 0.3s ease;
        }
        
        .image-pending-replace .card-img {
            opacity: 0.7;
            transition: all 0.3s ease;
        }
    </style>
    
    <link href="~/css/property-animations.css" rel="stylesheet" />
}

@section Scripts {
    <script>
        // Animation on load
        document.addEventListener('DOMContentLoaded', function () {
            // Debug image paths
            console.log('Debugging image paths:');
            document.querySelectorAll('.card-img').forEach(img => {
                console.log('Image src:', img.src);
                console.log('Image complete:', img.complete);
                console.log('Image naturalWidth:', img.naturalWidth);
            });
            
            document.querySelector('.card').classList.add('show');
            document.querySelectorAll('.section').forEach(section => {
                section.classList.add('show');
            });

            // Debug image loading
            console.log('Available images:', @Json.Serialize(Model.ExistingImages?.Count ?? 0));
            document.querySelectorAll('.card-img').forEach(img => {
                console.log('Image src:', img.src);
                img.addEventListener('error', function() {
                    console.error('Failed to load image:', this.src);
                    this.src = '/uploads/properties/placeholder.jpg'; // Fallback image
                });
                img.addEventListener('load', function() {
                    console.log('Successfully loaded image:', this.src);
                });
            });

            // Ensure all image cards are visible
            document.querySelectorAll('.card, .card-body, .card-img').forEach(el => {
                el.style.display = 'block';
                el.style.visibility = 'visible';
                el.style.opacity = '1';
            });

            // Add Property Images button click handler
            document.getElementById('addPropertyImagesBtn').addEventListener('click', function() {
                document.getElementById('propertyImagesInput').click();
            });
            
            // Add Floor Plan Images button click handler
            document.getElementById('addFloorPlanImagesBtn').addEventListener('click', function() {
                document.getElementById('floorPlanImagesInput').click();
            });
            
            // Property Images input change handler
            document.getElementById('propertyImagesInput').addEventListener('change', function(e) {
                if (this.files.length > 0) {
                    const fileCount = this.files.length;
                    const fileText = fileCount === 1 ? '1 image selected' : `${fileCount} images selected`;
                    
                    // Show notification to user
                    const alert = document.createElement('div');
                    alert.className = 'alert alert-success alert-dismissible fade show border-0 rounded-3 shadow-sm mb-4';
                    alert.innerHTML = `
                        <div class="d-flex align-items-center">
                            <i class="bi bi-check-circle-fill fs-4 me-2"></i>
                            <div>${fileText} - Will be uploaded when you save changes</div>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;
                    
                    // Insert the alert after the "Add Property Images" button
                    const propertyImagesSection = document.getElementById('addPropertyImagesBtn').closest('.section');
                    const existingAlert = propertyImagesSection.querySelector('.alert-success');
                    if (existingAlert) {
                        existingAlert.remove();
                    }
                    propertyImagesSection.insertBefore(alert, propertyImagesSection.querySelector('.row').nextSibling);
                }
            });
            
            // Floor Plan Images input change handler
            document.getElementById('floorPlanImagesInput').addEventListener('change', function(e) {
                if (this.files.length > 0) {
                    const fileCount = this.files.length;
                    const fileText = fileCount === 1 ? '1 image selected' : `${fileCount} images selected`;
                    
                    // Show notification to user
                    const alert = document.createElement('div');
                    alert.className = 'alert alert-success alert-dismissible fade show border-0 rounded-3 shadow-sm mb-4';
                    alert.innerHTML = `
                        <div class="d-flex align-items-center">
                            <i class="bi bi-check-circle-fill fs-4 me-2"></i>
                            <div>${fileText} - Will be uploaded when you save changes</div>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;
                    
                    // Insert the alert after the "Add Floor Plan Images" button
                    const floorPlanSection = document.getElementById('addFloorPlanImagesBtn').closest('.section');
                    const existingAlert = floorPlanSection.querySelector('.alert-success');
                    if (existingAlert) {
                        existingAlert.remove();
                    }
                    floorPlanSection.insertBefore(alert, floorPlanSection.querySelector('.row').nextSibling);
                }
            });

            // Array to store IDs of images pending deletion
            let pendingDeleteImageIds = [];
            
            // Object to track images pending replacement
            let pendingReplaceImages = {};

            // Add click event listeners to delete buttons
            document.querySelectorAll('.delete-img-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const imageId = this.getAttribute('data-id');
                    if (!imageId) {
                        console.error('No image ID found on delete button');
                        return;
                    }
                    
                    const imageContainer = document.getElementById(`image-container-${imageId}`);
                    if (!imageContainer) {
                        console.error(`Image container with ID 'image-container-${imageId}' not found`);
                        return;
                    }
                    
                    // If already marked for deletion, remove from pending list
                    if (pendingDeleteImageIds.includes(imageId)) {
                        // Remove from pending deletion list
                        pendingDeleteImageIds = pendingDeleteImageIds.filter(id => id !== imageId);
                        
                        // Remove the pending delete overlay
                        const overlay = imageContainer.querySelector('.pending-delete-overlay');
                        if (overlay) {
                            overlay.remove();
                        }
                        
                        // Remove the pending delete class
                        imageContainer.querySelector('.card').classList.remove('image-pending-delete');
                        
                        // Update the hidden field with current pending delete list
                        document.getElementById('deletedImageIds').value = pendingDeleteImageIds.join(',');
                        console.log('Removed from pending deletion:', imageId);
                        console.log('Current pending deletions:', pendingDeleteImageIds);
                    } else {
                        // Add to pending deletion list
                        pendingDeleteImageIds.push(imageId);
                        
                        // Mark the container
                        imageContainer.querySelector('.card').classList.add('image-pending-delete');
                        
                        // Create and append the pending delete badge
                        const overlay = document.createElement('div');
                        overlay.className = 'pending-delete-overlay';
                        overlay.innerHTML = `
                            <span class="pending-badge badge-pending-delete">
                                Pending Deletion
                                <i class="bi bi-x-circle cancel-action cancel-delete-btn" data-id="${imageId}" title="Cancel"></i>
                            </span>
                        `;
                        imageContainer.querySelector('.card').appendChild(overlay);
                        
                        // Update the hidden field with current pending delete list
                        document.getElementById('deletedImageIds').value = pendingDeleteImageIds.join(',');
                        console.log('Marked for deletion:', imageId);
                        console.log('Current pending deletions:', pendingDeleteImageIds);
                    }
                });
            });

            // Event delegation for cancel delete buttons (which are dynamically created)
            document.addEventListener('click', function(e) {
                if (e.target.closest('.cancel-delete-btn')) {
                    const btn = e.target.closest('.cancel-delete-btn');
                    const imageId = btn.getAttribute('data-id');
                    
                    if (!imageId) {
                        console.error('No image ID found on cancel button');
                        return;
                    }
                    
                    const imageContainer = document.getElementById(`image-container-${imageId}`);
                    
                    if (!imageContainer) {
                        console.error(`Image container with ID 'image-container-${imageId}' not found`);
                        return;
                    }
                    
                    // Remove from pending deletion list
                    pendingDeleteImageIds = pendingDeleteImageIds.filter(id => id !== imageId);
                    
                    // Remove the pending delete overlay
                    const overlay = imageContainer.querySelector('.pending-delete-overlay');
                    if (overlay) {
                        overlay.remove();
                    }
                    
                    // Remove the pending delete class
                    imageContainer.querySelector('.card').classList.remove('image-pending-delete');
                    
                    // Update the hidden field
                    document.getElementById('deletedImageIds').value = pendingDeleteImageIds.join(',');
                    console.log('Cancelled deletion for:', imageId);
                    console.log('Current pending deletions:', pendingDeleteImageIds);
                }
            });

            // Add click event listeners to edit buttons
            document.querySelectorAll('.edit-img-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const imageId = this.getAttribute('data-id');
                    const imageType = this.getAttribute('data-type');
                    const imageContainer = document.getElementById(`image-container-${imageId}`);
                    
                    // If this image is already pending deletion, don't allow editing
                    if (pendingDeleteImageIds.includes(imageId)) {
                        alert('Please cancel the pending deletion before editing this image.');
                        return;
                    }
                    
                    // If already has a replacement pending, cancel it
                    if (imageId in pendingReplaceImages) {
                        // Remove from pending replacements
                        delete pendingReplaceImages[imageId];
                        
                        // Remove the pending replacement overlay
                        const overlay = imageContainer.querySelector('.pending-replacement-overlay');
                        if (overlay) {
                            overlay.remove();
                        }
                        
                        // Remove the image preview
                        const preview = imageContainer.querySelector('.pending-replacement-preview');
                        if (preview) {
                            preview.remove();
                        }
                        
                        // Remove the pending replacement class
                        imageContainer.querySelector('.card').classList.remove('image-pending-replace');
                        
                        // Remove the file input from the form
                        const existingInput = document.querySelector(`input[name="ReplacementImages[${imageId}]"]`);
                        if (existingInput) {
                            existingInput.remove();
                        }
                        
                        console.log('Cancelled replacement for:', imageId);
                        return;
                    }
                    
                    // Create a file input for replacement
                    const fileInput = document.createElement('input');
                    fileInput.type = 'file';
                    fileInput.accept = 'image/*';
                    fileInput.style.display = 'none';
                    fileInput.name = `ReplacementImages[${imageId}]`;
                    fileInput.addEventListener('change', function() {
                        if (this.files.length > 0) {
                            const file = this.files[0];
                            // Create URL for preview
                            const imageUrl = URL.createObjectURL(file);
                            
                            // Mark the container
                            imageContainer.querySelector('.card').classList.add('image-pending-replace');
                            
                            // Create and append the pending replacement badge
                            const overlay = document.createElement('div');
                            overlay.className = 'pending-replacement-overlay';
                            overlay.innerHTML = `
                                <span class="pending-badge badge-pending-replace">
                                    Pending Replacement
                                    <i class="bi bi-x-circle cancel-action cancel-replace-btn" data-id="${imageId}" title="Cancel"></i>
                                </span>
                            `;
                            imageContainer.querySelector('.card').appendChild(overlay);
                            
                            // Add the image preview
                            const preview = document.createElement('img');
                            preview.src = imageUrl;
                            preview.className = 'pending-replacement-preview';
                            preview.alt = 'New image';
                            imageContainer.querySelector('.card').appendChild(preview);
                            
                            // Store in pending replacements
                            pendingReplaceImages[imageId] = file.name;
                            console.log('Marked for replacement:', imageId, 'with file:', file.name);
                            
                            // Add the input to the form
                            document.getElementById('replacementImagesContainer').appendChild(this);
                        }
                    });
                    
                    // Trigger file selection
                    fileInput.click();
                });
            });

            // Event delegation for cancel buttons (which are dynamically created)
            document.addEventListener('click', function(e) {
                // Handle cancel delete buttons
                if (e.target.closest('.cancel-delete-btn')) {
                    const btn = e.target.closest('.cancel-delete-btn');
                    const imageId = btn.getAttribute('data-id');
                    const imageContainer = document.getElementById(`image-container-${imageId}`);
                    
                    // Remove from pending deletion list
                    pendingDeleteImageIds = pendingDeleteImageIds.filter(id => id !== imageId);
                    
                    // Remove the pending delete overlay
                    const overlay = imageContainer.querySelector('.pending-delete-overlay');
                    if (overlay) {
                        overlay.remove();
                    }
                    
                    // Remove the pending delete class
                    imageContainer.querySelector('.card').classList.remove('image-pending-delete');
                    
                    // Update the hidden field
                    document.getElementById('deletedImageIds').value = pendingDeleteImageIds.join(',');
                    console.log('Cancelled deletion for:', imageId);
                    console.log('Current pending deletions:', pendingDeleteImageIds);
                }
                
                // Handle cancel replace buttons
                if (e.target.closest('.cancel-replace-btn')) {
                    const btn = e.target.closest('.cancel-replace-btn');
                    const imageId = btn.getAttribute('data-id');
                    const imageContainer = document.getElementById(`image-container-${imageId}`);
                    
                    if (!imageContainer) {
                        console.error(`Image container with ID 'image-container-${imageId}' not found`);
                        return;
                    }
                    
                    // Remove from pending replacements
                    delete pendingReplaceImages[imageId];
                    
                    // Remove the pending replacement overlay
                    const overlay = imageContainer.querySelector('.pending-replacement-overlay');
                    if (overlay) {
                        overlay.remove();
                    }
                    
                    // Remove the image preview
                    const preview = imageContainer.querySelector('.pending-replacement-preview');
                    if (preview) {
                        preview.remove();
                    }
                    
                    // Remove the pending replacement class
                    imageContainer.querySelector('.card').classList.remove('image-pending-replace');
                    
                    // Remove the file input from the form
                    const existingInput = document.querySelector(`input[name="ReplacementImages[${imageId}]"]`);
                    if (existingInput) {
                        existingInput.remove();
                    }
                    
                    console.log('Cancelled replacement for:', imageId);
                }
            });
        });
    </script>
}