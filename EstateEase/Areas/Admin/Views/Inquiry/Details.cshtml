@using EstateEase.Models.ViewModels
@model InquiryViewModel
@{
    ViewData["Title"] = "Inquiry Details";
    Layout = "_AdminLayout";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="mb-1 fw-bold">Inquiry Details</h4>
                    <p class="text-muted">Review client inquiry information</p>
                </div>
                <div>
                    <a asp-action="Index" class="btn btn-outline-primary rounded-pill">
                        <i class="bi bi-arrow-left me-2"></i> Back to Inquiries
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show shadow-sm rounded-4 border-0" role="alert">
            <div class="d-flex align-items-center">
                <i class="bi bi-check-circle-fill fs-5 me-2"></i>
                <strong>@TempData["Success"]</strong>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show shadow-sm rounded-4 border-0" role="alert">
            <div class="d-flex align-items-center">
                <i class="bi bi-exclamation-circle-fill fs-5 me-2"></i>
                <strong>@TempData["Error"]</strong>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-8 col-lg-6 mx-auto">
            <div class="card shadow-sm rounded-4 mb-4">
                <div class="card-header p-4 border-0 bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0 fw-bold">@Model.Subject</h5>
                        <div>
                            <span class="badge @(Model.Status == "New" ? "bg-danger" : (Model.Status == "In Progress" ? "bg-warning" : "bg-success")) rounded-pill">
                                @Model.Status
                            </span>
                        </div>
                    </div>
                    <p class="text-muted small mt-2 mb-0">
                        <i class="bi bi-clock me-1"></i> Started on @Model.CreatedAt.ToString("MMM dd, yyyy 'at' hh:mm tt")
                        @if (Model.Status == "Resolved")
                        {
                            <span class="ms-3"><i class="bi bi-check-circle me-1"></i> Resolved on @(Model.UpdatedAt?.ToString("MMM dd, yyyy 'at' hh:mm tt") ?? "N/A")</span>
                        }
                    </p>
                </div>
                <div class="card-body p-4">
                    <div class="chat-container">
                        <div class="chat-messages" id="chatMessages">
                            @if (Model.Messages != null && Model.Messages.Any())
                            {
                                @foreach (var message in Model.Messages.OrderBy(m => m.CreatedAt))
                                {
                                    string messageClass = message.IsFromCurrentUser ? "chat-message-outgoing" : "chat-message-incoming";
                                    string senderBadgeClass = message.SenderType == "User" ? "bg-primary" : (message.SenderType == "Admin" ? "bg-info" : "bg-secondary");
                                    
                                    <div class="chat-message @messageClass">
                                        <div class="message-content">
                                            <div class="message-header">
                                                <span class="badge @senderBadgeClass rounded-pill">@(message.IsFromCurrentUser ? "You" : message.SenderType)</span>
                                                <small class="text-muted ms-2">@message.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</small>
                                            </div>
                                            <div class="message-body">
                                                @message.Message
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="chat-message chat-message-incoming">
                                    <div class="message-content">
                                        <div class="message-header">
                                            <span class="badge bg-primary rounded-pill">Client</span>
                                            <small class="text-muted ms-2">@Model.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</small>
                                        </div>
                                        <div class="message-body">
                                            @Model.Message
                                        </div>
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(Model.ReplyMessage))
                                {
                                    <div class="chat-message chat-message-outgoing">
                                        <div class="message-content">
                                            <div class="message-header">
                                                <span class="badge bg-info rounded-pill">You</span>
                                                <small class="text-muted ms-2">@(Model.UpdatedAt?.ToString("MMM dd, yyyy hh:mm tt") ?? Model.CreatedAt.AddDays(1).ToString("MMM dd, yyyy hh:mm tt"))</small>
                                            </div>
                                            <div class="message-body">
                                                @Model.ReplyMessage
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        
                        @if (Model.Status != "Resolved")
                        {
                            <div class="quick-reply-form mt-4">
                                <form asp-action="QuickReply" asp-route-id="@Model.Id" method="post">
                                    @Html.AntiForgeryToken()
                                    <div class="input-group">
                                        <input type="text" name="replyMessage" class="form-control" placeholder="Type your message..." required>
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-send"></i>
                                        </button>
                                    </div>
                                </form>
                            </div>
                        }
                    </div>
                    
                    <div class="mt-4 d-flex gap-2 justify-content-end">
                        @if (Model.Status != "Resolved")
                        {
                            <form asp-action="MarkAsResolved" asp-route-id="@Model.Id" method="post" class="d-inline">
                                <button type="submit" class="btn btn-success">
                                    <i class="bi bi-check-lg me-2"></i> Mark as Resolved
                                </button>
                            </form>
                        }
                        else
                        {
                            <span class="badge bg-success p-2">
                                <i class="bi bi-check-circle me-2"></i> This inquiry has been resolved
                            </span>
                        }
                        <form asp-action="DeleteInquiry" asp-route-id="@Model.Id" method="post" class="d-inline">
                            <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this inquiry? This action cannot be undone.')">
                                <i class="bi bi-trash me-2"></i> Delete Inquiry
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Card styling */
        .card {
            overflow: hidden;
            border-radius: 16px;
            transition: box-shadow 0.3s ease;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;
        }
        
        /* Chat styling */
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 450px;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        .chat-messages {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        .chat-message {
            display: flex;
            margin-bottom: 1rem;
        }
        
        .chat-message-incoming {
            justify-content: flex-start;
        }
        
        .chat-message-outgoing {
            justify-content: flex-end;
        }
        
        .message-content {
            max-width: 80%;
            padding: 0.75rem;
            border-radius: 1rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .chat-message-incoming .message-content {
            background-color: #f8f9fa;
            border-top-left-radius: 0;
        }
        
        .chat-message-outgoing .message-content {
            background-color: #e9f3ff;
            border-top-right-radius: 0;
        }
        
        .message-header {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .message-body {
            white-space: pre-wrap;
        }
        
        /* Quick reply form */
        .quick-reply-form .input-group {
            border-radius: 50px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .quick-reply-form .form-control {
            border-right: 0;
            padding: 12px 20px;
            font-size: 0.95rem;
        }
        
        .quick-reply-form .form-control:focus {
            box-shadow: none;
        }
        
        .quick-reply-form .btn {
            border-radius: 0 50px 50px 0;
            padding-left: 20px;
            padding-right: 20px;
        }
        
        /* Badge styling */
        .badge {
            padding: 0.5em 1em;
            font-weight: normal;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Scroll to bottom of chat messages
            var chatContainer = document.getElementById('chatMessages');
            if (chatContainer) {
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
        });
    </script>
} 